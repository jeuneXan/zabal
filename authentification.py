import os
import requests
import re

# Variable priv√©e pour stocker la session unique
_session = None

def login_to_api():
    """
    Se connecte √† l'API en r√©cup√©rant d'abord le jeton CSRF.
     """
    api_url = os.environ.get("API_URL", "https://preprod.disc-chantier.com")
    login_url = f"{api_url}/login"
    print(f"üì° Connexion √† l'API : {api_url}")

    # Cr√©ation d'une session pour g√©rer les cookies
    session = requests.Session()

    # 1Ô∏è‚É£ √âtape 1 : R√©cup√©rer la page de login pour extraire le token CSRF
    response = session.get(login_url)
    if response.status_code != 200:
        print(f"‚ùå Erreur en r√©cup√©rant la page de login ({response.status_code})")
        return None

    # Extraire le jeton CSRF du HTML
    match = re.search(r'name="_csrf_token"\s+value="([^"]+)"', response.text)
    if not match:
        print("üö® Impossible de r√©cup√©rer le jeton CSRF. V√©rifiez si la page de login a chang√©.")
        return None

    csrf_token = match.group(1)

    # 2Ô∏è‚É£ √âtape 2 : Faire la requ√™te de login avec le jeton CSRF
    login_data = {
        '_username': os.environ.get("API_USERNAME", "erle@disc-chantier.com"),
        '_password': os.environ.get("API_PASSWORD", "elre123.lo"),
        '_remember_me': 'on',
        '_csrf_token': csrf_token  # Ajout du token CSRF
    }

    response = session.post(login_url, data=login_data, allow_redirects=False)

    # V√©rification de la connexion
    if response.status_code in [302, 200]:  # 302 = redirection apr√®s connexion r√©ussie
        print("‚úÖ Connexion r√©ussie !")
    else:
        print(f"‚ùå Erreur de connexion ({response.status_code}) : {response.text}")
        return None

    return session

def get_api_session():
    """
    Retourne l'objet session unique pour acc√©der √† l'API.
    """
    global _session
    if _session is None:
        _session = login_to_api()
    return _session
